(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[     36019,        784]
NotebookOptionsPosition[     35282,        763]
NotebookOutlinePosition[     35704,        779]
CellTagsIndexPosition[     35661,        776]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Fuzzy", " ", "Logic", " ", "Layer"}], "*)"}], 
  RowBox[{
   RowBox[{
    RowBox[{"fuzzyLogicLayer", "=", 
     RowBox[{"NetChain", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"LinearLayer", "[", "10", "]"}], ",", "LogisticSigmoid"}], 
       "}"}], "]"}]}], ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"centralGanglion", "=", 
     RowBox[{"NetGraph", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<FuzzyLogic\>\"", "->", 
          RowBox[{"NetChain", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"LinearLayer", "[", "10", "]"}], ",", 
             "LogisticSigmoid"}], "}"}], "]"}]}], ",", 
         RowBox[{"\"\<Crosstalk\>\"", "->", 
          RowBox[{"NetMapOperator", "[", 
           RowBox[{"LinearLayer", "[", "10", "]"}], "]"}]}], ",", 
         RowBox[{"\"\<Add\>\"", "->", 
          RowBox[{"ThreadingLayer", "[", 
           RowBox[{"Plus", ",", "1"}], "]"}]}]}], "  ", 
        RowBox[{"(*", 
         RowBox[{"Adding", " ", "broadcasting", " ", "integer"}], "*)"}], 
        "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<FuzzyLogic\>\"", "->", "\"\<Add\>\""}], ",", 
         RowBox[{"\"\<Crosstalk\>\"", "->", 
          RowBox[{"\"\<Add\>\"", "->", 
           RowBox[{"NetPort", "[", "\"\<Output\>\"", "]"}]}]}]}], "}"}]}], 
      "]"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", 
    RowBox[{"Updated", " ", "RNN", " ", "Model"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"rnnModel", "=", 
     RowBox[{"NetChain", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"GatedRecurrentLayer", "[", "20", "]"}], ",", 
        RowBox[{"LinearLayer", "[", "10", "]"}]}], "}"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{"Kohonen", " ", "SOM"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"kohonenSOMLayer", "=", 
     RowBox[{"NetChain", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"LinearLayer", "[", "10", "]"}], ",", 
        RowBox[{"(*", 
         RowBox[{
         "Replace", " ", "with", " ", "actual", " ", "Kohonen", " ", 
          "logic"}], "*)"}], "LogisticSigmoid"}], "}"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Corrected", " ", "LSTM", " ", "Model"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"lstmModel", "=", 
     RowBox[{"NetChain", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"LongShortTermMemoryLayer", "[", "20", "]"}], ",", 
        RowBox[{"(*", 
         RowBox[{"Corrected", " ", "LSTM", " ", "Layer"}], "*)"}], 
        RowBox[{"LinearLayer", "[", "10", "]"}]}], "}"}], "]"}]}], ";"}], 
   "\n", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Updated", " ", "Generator", " ", "with", " ", "explicit", " ", "merging",
      " ", "of", " ", "outputs"}], "*)"}], 
   RowBox[{
    RowBox[{"generator", "=", 
     RowBox[{"NetGraph", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<RNN\>\"", "->", "rnnModel"}], ",", 
         RowBox[{"\"\<SOM\>\"", "->", "kohonenSOMLayer"}], ",", 
         RowBox[{"\"\<LSTM\>\"", "->", "lstmModel"}], ",", 
         RowBox[{"\"\<Catenate\>\"", "->", 
          RowBox[{"CatenateLayer", "[", "]"}]}], ",", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"Merge", " ", "RNN"}], ",", "SOM", ",", 
           RowBox[{"and", " ", "LSTM", " ", "outputs"}]}], "*)"}], 
         RowBox[{"\"\<Ganglion\>\"", "->", "centralGanglion"}], ",", 
         RowBox[{"\"\<Combine\>\"", "->", 
          RowBox[{"CatenateLayer", "[", "]"}]}], ",", 
         RowBox[{"\"\<FC\>\"", "->", 
          RowBox[{"LinearLayer", "[", "10", "]"}]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "->", 
          RowBox[{"{", 
           RowBox[{"\"\<RNN\>\"", ",", "\"\<SOM\>\"", ",", "\"\<LSTM\>\""}], 
           "}"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<RNN\>\"", ",", "\"\<SOM\>\"", ",", "\"\<LSTM\>\""}], 
           "}"}], "->", 
          RowBox[{"\"\<Catenate\>\"", "->", 
           RowBox[{"\"\<Ganglion\>\"", "->", 
            RowBox[{"\"\<Combine\>\"", "->", 
             RowBox[{"\"\<FC\>\"", "->", 
              RowBox[{"NetPort", "[", "\"\<Output\>\"", "]"}]}]}]}]}]}]}], 
        "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
    "Updated", " ", "Discriminator", " ", "with", " ", "explicit", " ", 
     "merging", " ", "of", " ", "outputs"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"discriminator", "=", 
     RowBox[{"NetGraph", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<RNN\>\"", "->", "rnnModel"}], ",", 
         RowBox[{"\"\<SOM\>\"", "->", "kohonenSOMLayer"}], ",", 
         RowBox[{"\"\<LSTM\>\"", "->", "lstmModel"}], ",", 
         RowBox[{"\"\<Catenate\>\"", "->", 
          RowBox[{"CatenateLayer", "[", "]"}]}], ",", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"Merge", " ", "RNN"}], ",", "SOM", ",", 
           RowBox[{"and", " ", "LSTM", " ", "outputs"}]}], "*)"}], 
         RowBox[{"\"\<Ganglion\>\"", "->", "centralGanglion"}], ",", 
         RowBox[{"\"\<Combine\>\"", "->", 
          RowBox[{"CatenateLayer", "[", "]"}]}], ",", 
         RowBox[{"\"\<FC\>\"", "->", 
          RowBox[{"LinearLayer", "[", "1", "]"}]}], ",", 
         RowBox[{"\"\<Sigmoid\>\"", "->", "LogisticSigmoid"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "->", 
          RowBox[{"{", 
           RowBox[{"\"\<RNN\>\"", ",", "\"\<SOM\>\"", ",", "\"\<LSTM\>\""}], 
           "}"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<RNN\>\"", ",", "\"\<SOM\>\"", ",", "\"\<LSTM\>\""}], 
           "}"}], "->", 
          RowBox[{"\"\<Catenate\>\"", "->", 
           RowBox[{"\"\<Ganglion\>\"", "->", 
            RowBox[{"\"\<Combine\>\"", "->", 
             RowBox[{"\"\<FC\>\"", "->", 
              RowBox[{"\"\<Sigmoid\>\"", "->", 
               RowBox[{"NetPort", "[", "\"\<Output\>\"", "]"}]}]}]}]}]}]}]}], 
        "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Manually", " ", "initialize", " ", "weights", " ", "and", " ", 
     "biases"}], "*)"}], 
   RowBox[{
    RowBox[{"net", "=", 
     RowBox[{"NetChain", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"LinearLayer", "[", 
         RowBox[{"10", ",", 
          RowBox[{"\"\<Weights\>\"", "->", 
           RowBox[{"RandomReal", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", "0.1"}], ",", "0.1"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"10", ",", "10"}], "}"}]}], "]"}]}], ",", 
          RowBox[{"\"\<Biases\>\"", "->", 
           RowBox[{"RandomReal", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", "0.1"}], ",", "0.1"}], "}"}], ",", 
             RowBox[{"{", "10", "}"}]}], "]"}]}]}], "]"}], ",", 
        RowBox[{"(*", 
         RowBox[{"Manually", " ", "initialized", " ", "biases"}], "*)"}], 
        "LogisticSigmoid"}], "}"}], "]"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", 
    RowBox[{"Input", " ", "data"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"inputData", "=", 
     RowBox[{"RandomReal", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "10"}], "}"}]}], "]"}]}], ";"}], "  ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"Example", " ", 
      RowBox[{"input", ":", 
       RowBox[{"batch", " ", "of", " ", "5", " ", "vectors"}]}]}], ",", 
     RowBox[{"each", " ", "with", " ", "10", " ", "elements"}]}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Evaluate", " ", "the", " ", "network"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"output", "=", 
     RowBox[{"net", "[", "inputData", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Display", " ", "the", " ", "output"}], "*)"}], "\n", 
   RowBox[{"Grid", "[", 
    RowBox[{
     RowBox[{"output", "//", "MatrixForm"}], ",", 
     RowBox[{"Frame", "->", "All"}], ",", 
     RowBox[{"Spacings", "->", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1"}], "}"}]}]}], "]"}], "\n", "\n"}]}]], "Input",
 CellChangeTimes->{{3.933001788974537*^9, 3.933001788977043*^9}, {
  3.9330019344034634`*^9, 3.9330019382098083`*^9}, {3.933002035530796*^9, 
  3.9330020623179035`*^9}, {3.9330021637634373`*^9, 3.9330021655984344`*^9}, {
  3.9330022791353607`*^9, 3.93300229868211*^9}, {3.933002389891613*^9, 
  3.9330023932413692`*^9}, {3.933002738082035*^9, 3.9330027400870514`*^9}, {
  3.9330028315413113`*^9, 3.933002849491314*^9}, {3.9330029167571907`*^9, 
  3.9330029328155155`*^9}, {3.9330030779070435`*^9, 3.9330030792941*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"d6ab5b32-15df-4b4e-b9d7-9f82c0e35147"],

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0.4971384108066559`", "0.47595247626304626`", "0.45442670583724976`",
         "0.4745146334171295`", "0.5178443193435669`", "0.46971529722213745`",
         "0.5833932161331177`", "0.5347678661346436`", "0.5002205967903137`", 
        "0.4533003568649292`"},
       {"0.49171167612075806`", "0.4782467782497406`", "0.4754267930984497`", 
        "0.4751338064670563`", "0.5274127125740051`", "0.479377418756485`", 
        "0.569599449634552`", "0.5311780571937561`", "0.5056692361831665`", 
        "0.45755937695503235`"},
       {"0.4651423990726471`", "0.48427367210388184`", "0.47566914558410645`",
         "0.497071236371994`", "0.5302339196205139`", "0.48984745144844055`", 
        "0.5824297070503235`", "0.5326293110847473`", "0.4751914143562317`", 
        "0.4741947650909424`"},
       {"0.4736296534538269`", "0.4953710734844208`", "0.4519354999065399`", 
        "0.4838434159755707`", "0.5180213451385498`", "0.5022671222686768`", 
        "0.5648877620697021`", "0.5430331826210022`", "0.4994555711746216`", 
        "0.4819689095020294`"},
       {"0.5216659307479858`", "0.47330403327941895`", "0.46692419052124023`",
         "0.4610072672367096`", "0.5193886160850525`", "0.4808608591556549`", 
        "0.5370837450027466`", "0.5364384055137634`", "0.53121417760849`", 
        "0.4445861577987671`"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   RowBox[{"Frame", "\[Rule]", "All"}], ",", 
   RowBox[{"Spacings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.933002744835207*^9, {3.933002853986557*^9, 3.9330028753737545`*^9}, 
   3.93300295005768*^9, 3.9330030901900864`*^9},
 CellLabel->
  "Out[120]=",ExpressionUUID->"62d92e26-b77a-d64d-a980-53ce968e976b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["%58"], "Input",
 NumberMarks->False,
 CellLabel->"In[65]:=",ExpressionUUID->"0daa0917-afdf-8c41-99a1-5e119f73b694"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["NetChain",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[
                    0.817375, 0.31808499999999995`, 0.3521274999999998], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9939125, 0.9772695, 0.97840425]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    FaceForm[{
                    Hue[0.033923303834808266`, 0.44313725490196076`, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6.221999645233154, 18.73400115966797}, {
                    9.045999526977539, 18.73400115966797}, {9.045999526977539,
                     8.734001159667969}, {6.221999645233154, 
                    8.734001159667969}, {6.221999645233154, 
                    18.73400115966797}}}]}, {
                    FaceForm[{
                    RGBColor[0.7565, 0.09078, 0.1361699999999998], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.81100082397461, 18.73400115966797}, {
                    15.635000228881836`, 18.73400115966797}, {
                    15.635000228881836`, 8.734001159667969}, {
                    12.81100082397461, 8.734001159667969}, {12.81100082397461,
                     18.73400115966797}}}]}, {
                    FaceForm[{
                    Hue[0.04791666666666667, 0.6274509803921569, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{19.39900016784668, 18.73400115966797}, {
                    22.222999572753906`, 18.73400115966797}, {
                    22.222999572753906`, 8.734001159667969}, {
                    19.39900016784668, 8.734001159667969}, {19.39900016784668,
                     18.73400115966797}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    9.98699951171875, 15.73439884185791}, {
                    11.868999481201172`, 13.73439884185791}, {
                    9.98699951171875, 11.73439884185791}, {9.98699951171875, 
                    15.73439884185791}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    16.575298309326172`, 15.73439884185791}, {
                    18.457298278808594`, 13.73439884185791}, {
                    16.575298309326172`, 11.73439884185791}, {
                    16.575298309326172`, 15.73439884185791}}}]}}}}}, {
                Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                 ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 30}}}], Center,
                Center, 32], 
              InsetBox[
               FormBox[
                FrameBox[
                 StyleBox["\"uninitialized\"", 
                  RGBColor[0.66, 0, 0], FontSize -> -3 + Inherited, 
                  StripOnInput -> False], Background -> GrayLevel[1, 0.9], 
                 FrameStyle -> None, FrameMargins -> {{0, 0}, {-1.5, -1.5}}, 
                 RoundingRadius -> 3, BaselinePosition -> (Center -> Center), 
                 StripOnInput -> False], TraditionalForm], {14, 14}]}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], ImagePadding -> {{0, 1}, {1, 0}}, 
              PlotRange -> {{-12, 40}, {-2, 30}}, ImageSize -> {60, 36}}], 
            GridBox[{{
               TagBox[
                StyleBox[
                 TemplateBox[{
                   TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox["\"array\"", "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{
                   TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox[
                 TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                   StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                  "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[
                    0.817375, 0.31808499999999995`, 0.3521274999999998], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9939125, 0.9772695, 0.97840425]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    FaceForm[{
                    Hue[0.033923303834808266`, 0.44313725490196076`, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6.221999645233154, 18.73400115966797}, {
                    9.045999526977539, 18.73400115966797}, {9.045999526977539,
                     8.734001159667969}, {6.221999645233154, 
                    8.734001159667969}, {6.221999645233154, 
                    18.73400115966797}}}]}, {
                    FaceForm[{
                    RGBColor[0.7565, 0.09078, 0.1361699999999998], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.81100082397461, 18.73400115966797}, {
                    15.635000228881836`, 18.73400115966797}, {
                    15.635000228881836`, 8.734001159667969}, {
                    12.81100082397461, 8.734001159667969}, {12.81100082397461,
                     18.73400115966797}}}]}, {
                    FaceForm[{
                    Hue[0.04791666666666667, 0.6274509803921569, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{19.39900016784668, 18.73400115966797}, {
                    22.222999572753906`, 18.73400115966797}, {
                    22.222999572753906`, 8.734001159667969}, {
                    19.39900016784668, 8.734001159667969}, {19.39900016784668,
                     18.73400115966797}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    9.98699951171875, 15.73439884185791}, {
                    11.868999481201172`, 13.73439884185791}, {
                    9.98699951171875, 11.73439884185791}, {9.98699951171875, 
                    15.73439884185791}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    16.575298309326172`, 15.73439884185791}, {
                    18.457298278808594`, 13.73439884185791}, {
                    16.575298309326172`, 11.73439884185791}, {
                    16.575298309326172`, 15.73439884185791}}}]}}}}}, {
                Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                 ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 30}}}], Center,
                Center, 32], 
              InsetBox[
               FormBox[
                FrameBox[
                 StyleBox["\"uninitialized\"", 
                  RGBColor[0.66, 0, 0], FontSize -> -3 + Inherited, 
                  StripOnInput -> False], Background -> GrayLevel[1, 0.9], 
                 FrameStyle -> None, FrameMargins -> {{0, 0}, {-1.5, -1.5}}, 
                 RoundingRadius -> 3, BaselinePosition -> (Center -> Center), 
                 StripOnInput -> False], TraditionalForm], {14, 14}]}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], ImagePadding -> {{0, 1}, {1, 0}}, 
              PlotRange -> {{-12, 40}, {-2, 30}}, ImageSize -> {60, 36}}], 
            GridBox[{{
               TagBox[
                
                DynamicModuleBox[{
                 NeuralNetworks`Private`NetChain`assoc3 = <|
                   "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{10, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> NeuralNetworks`SizeT, "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                  NeuralNetworks`Private`NetChain`opart, 
                  NeuralNetworks`Private`NetChain`part, 
                  NeuralNetworks`Private`NetChain`selected = Null}, 
                 DynamicBox[
                  GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"array\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                   GridBoxSpacings -> {"Columns" -> {{1}}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridFrameMargins -> {{0, 0}, {0, 0}}], 
                  TrackedSymbols :> {
                   NeuralNetworks`Private`NetChain`selected}], 
                 Initialization :> {NetChain}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  NetChain[<|
   "Type" -> "Chain", 
    "Nodes" -> <|
     "1" -> <|"Type" -> "Linear", 
        "Arrays" -> <|
         "Weights" -> 
          NeuralNetworks`TensorT[{10, NeuralNetworks`SizeT}, 
            NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
            NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]|>, 
        "Parameters" -> <|
         "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
          NeuralNetworks`SizeT, "$InputDimensions" -> 
          NeuralNetworks`ListT[
           NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
        "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
            NeuralNetworks`ListT[
            NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
            NeuralNetworks`AtomT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
      "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
        "Parameters" -> <|
         "Function" -> NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
          "$Dimensions" -> {10}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>,
     "Edges" -> {
     NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Inputs", "Input"], 
      NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Outputs", "Output"] -> 
      NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"]}, 
    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
        NeuralNetworks`ListT[NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
        NeuralNetworks`AtomT]|>, 
    "Outputs" -> <|
     "Output" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, <|
   "Version" -> "14.1.1", "Unstable" -> False|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.933002411075981*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"c36f0646-a046-1746-9a41-99439c0d5ff7"]
}, Open  ]]
},
WindowSize->{582.6, 488.4},
WindowMargins->{{Automatic, 261.6}, {17.399999999999977`, Automatic}},
FrontEndVersion->"14.1 for Microsoft Windows (64-bit) (July 16, 2024)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"4b37b7a0-0bac-8b45-b204-871cfe8c836a"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 9250, 229, 1303, "Input",ExpressionUUID->"d6ab5b32-15df-4b4e-b9d7-9f82c0e35147"],
Cell[9829, 253, 2221, 44, 115, "Output",ExpressionUUID->"62d92e26-b77a-d64d-a980-53ce968e976b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12087, 302, 129, 2, 28, "Input",ExpressionUUID->"0daa0917-afdf-8c41-99a1-5e119f73b694"],
Cell[12219, 306, 23047, 454, 62, "Output",ExpressionUUID->"c36f0646-a046-1746-9a41-99439c0d5ff7"]
}, Open  ]]
}
]
*)

