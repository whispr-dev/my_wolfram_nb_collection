(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[     42717,        946]
NotebookOptionsPosition[     40995,        914]
NotebookOutlinePosition[     41434,        931]
CellTagsIndexPosition[     41391,        928]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Fuzzy", " ", "Logic", " ", "Layer"}], "*)"}], 
  RowBox[{
   RowBox[{
    RowBox[{"fuzzyLogicLayer", "=", 
     RowBox[{"NetChain", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"LinearLayer", "[", "10", "]"}], ",", "LogisticSigmoid"}], 
       "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"centralGanglion", "=", 
     RowBox[{"NetGraph", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<FuzzyLogic\>\"", "->", 
          RowBox[{"NetChain", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"LinearLayer", "[", "10", "]"}], ",", 
             "LogisticSigmoid"}], "}"}], "]"}]}], ",", 
         RowBox[{"\"\<Crosstalk\>\"", "->", 
          RowBox[{"NetMapOperator", "[", 
           RowBox[{"LinearLayer", "[", "10", "]"}], "]"}]}], ",", 
         RowBox[{"\"\<Add\>\"", "->", 
          RowBox[{"ThreadingLayer", "[", 
           RowBox[{"Plus", ",", "1"}], "]"}]}]}], "  ", 
        RowBox[{"(*", 
         RowBox[{"Adding", " ", "broadcasting", " ", "integer"}], "*)"}], 
        "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<FuzzyLogic\>\"", "->", "\"\<Add\>\""}], ",", 
         RowBox[{"\"\<Crosstalk\>\"", "->", 
          RowBox[{"\"\<Add\>\"", "->", 
           RowBox[{"NetPort", "[", "\"\<Output\>\"", "]"}]}]}]}], "}"}]}], 
      "]"}]}], ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Updated", " ", "RNN", " ", "Model"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"rnnModel", "=", 
     RowBox[{"NetChain", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"GatedRecurrentLayer", "[", "20", "]"}], ",", 
        RowBox[{"LinearLayer", "[", "10", "]"}]}], "}"}], "]"}]}], ";"}], 
   "\n", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Kohonen", " ", "SOM"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"kohonenSOMLayer", "=", 
     RowBox[{"NetChain", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"LinearLayer", "[", "10", "]"}], ",", 
        RowBox[{"(*", 
         RowBox[{
         "Replace", " ", "with", " ", "actual", " ", "Kohonen", " ", 
          "logic"}], "*)"}], "LogisticSigmoid"}], "}"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{"Corrected", " ", "LSTM", " ", "Model"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"lstmModel", "=", 
     RowBox[{"NetChain", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"LongShortTermMemoryLayer", "[", "20", "]"}], ",", 
        RowBox[{"(*", 
         RowBox[{"Corrected", " ", "LSTM", " ", "Layer"}], "*)"}], 
        RowBox[{"LinearLayer", "[", "10", "]"}]}], "}"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
    "Updated", " ", "Generator", " ", "with", " ", "explicit", " ", "merging",
      " ", "of", " ", "outputs"}], "*)"}], 
   RowBox[{
    RowBox[{"generator", "=", 
     RowBox[{"NetGraph", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<RNN\>\"", "->", "rnnModel"}], ",", 
         RowBox[{"\"\<SOM\>\"", "->", "kohonenSOMLayer"}], ",", 
         RowBox[{"\"\<LSTM\>\"", "->", "lstmModel"}], ",", 
         RowBox[{"\"\<Catenate\>\"", "->", 
          RowBox[{"CatenateLayer", "[", "]"}]}], ",", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"Merge", " ", "RNN"}], ",", "SOM", ",", 
           RowBox[{"and", " ", "LSTM", " ", "outputs"}]}], "*)"}], 
         RowBox[{"\"\<Ganglion\>\"", "->", "centralGanglion"}], ",", 
         RowBox[{"\"\<Combine\>\"", "->", 
          RowBox[{"CatenateLayer", "[", "]"}]}], ",", 
         RowBox[{"\"\<FC\>\"", "->", 
          RowBox[{"LinearLayer", "[", "10", "]"}]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "->", 
          RowBox[{"{", 
           RowBox[{"\"\<RNN\>\"", ",", "\"\<SOM\>\"", ",", "\"\<LSTM\>\""}], 
           "}"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<RNN\>\"", ",", "\"\<SOM\>\"", ",", "\"\<LSTM\>\""}], 
           "}"}], "->", 
          RowBox[{"\"\<Catenate\>\"", "->", 
           RowBox[{"\"\<Ganglion\>\"", "->", 
            RowBox[{"\"\<Combine\>\"", "->", 
             RowBox[{"\"\<FC\>\"", "->", 
              RowBox[{"NetPort", "[", "\"\<Output\>\"", "]"}]}]}]}]}]}]}], 
        "}"}]}], "]"}]}], ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Updated", " ", "Discriminator", " ", "with", " ", "explicit", " ", 
     "merging", " ", "of", " ", "outputs"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"discriminator", "=", 
     RowBox[{"NetGraph", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<RNN\>\"", "->", "rnnModel"}], ",", 
         RowBox[{"\"\<SOM\>\"", "->", "kohonenSOMLayer"}], ",", 
         RowBox[{"\"\<LSTM\>\"", "->", "lstmModel"}], ",", 
         RowBox[{"\"\<Catenate\>\"", "->", 
          RowBox[{"CatenateLayer", "[", "]"}]}], ",", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"Merge", " ", "RNN"}], ",", "SOM", ",", 
           RowBox[{"and", " ", "LSTM", " ", "outputs"}]}], "*)"}], 
         RowBox[{"\"\<Ganglion\>\"", "->", "centralGanglion"}], ",", 
         RowBox[{"\"\<Combine\>\"", "->", 
          RowBox[{"CatenateLayer", "[", "]"}]}], ",", 
         RowBox[{"\"\<FC\>\"", "->", 
          RowBox[{"LinearLayer", "[", "1", "]"}]}], ",", 
         RowBox[{"\"\<Sigmoid\>\"", "->", "LogisticSigmoid"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "->", 
          RowBox[{"{", 
           RowBox[{"\"\<RNN\>\"", ",", "\"\<SOM\>\"", ",", "\"\<LSTM\>\""}], 
           "}"}]}], ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<RNN\>\"", ",", "\"\<SOM\>\"", ",", "\"\<LSTM\>\""}], 
           "}"}], "->", 
          RowBox[{"\"\<Catenate\>\"", "->", 
           RowBox[{"\"\<Ganglion\>\"", "->", 
            RowBox[{"\"\<Combine\>\"", "->", 
             RowBox[{"\"\<FC\>\"", "->", 
              RowBox[{"\"\<Sigmoid\>\"", "->", 
               RowBox[{"NetPort", "[", "\"\<Output\>\"", "]"}]}]}]}]}]}]}]}], 
        "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Manually", " ", "initialize", " ", "weights", " ", "and", " ", 
     "biases"}], "*)"}], 
   RowBox[{
    RowBox[{"net", "=", 
     RowBox[{"NetChain", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"LinearLayer", "[", 
         RowBox[{"10", ",", 
          RowBox[{"\"\<Weights\>\"", "->", 
           RowBox[{"RandomReal", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", "0.1"}], ",", "0.1"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"10", ",", "10"}], "}"}]}], "]"}]}], ",", 
          RowBox[{"\"\<Biases\>\"", "->", 
           RowBox[{"RandomReal", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", "0.1"}], ",", "0.1"}], "}"}], ",", 
             RowBox[{"{", "10", "}"}]}], "]"}]}]}], "]"}], ",", 
        RowBox[{"(*", 
         RowBox[{"Manually", " ", "initialized", " ", "biases"}], "*)"}], 
        "LogisticSigmoid"}], "}"}], "]"}]}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Import", " ", "the", " ", "WAV", " ", "file"}], "*)"}], 
   RowBox[{
    RowBox[{"audio", "=", 
     RowBox[{"Import", "[", 
      RowBox[{
      "\"\<C:\\Users\\User\\Desktop\\wolfram_projects\\choirtest.wav\>\"", 
       " ", ",", "audio"}], "]"}]}], ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Convert", " ", "audio", " ", "to", " ", "an", " ", "array", " ", "of", 
     " ", "samples"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"audioData", "=", 
     RowBox[{"AudioData", "[", "audio", "]"}]}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Reshape", " ", "or", " ", "process", " ", "the", " ", "audioData", " ", 
     "as", " ", "needed", " ", "for", " ", "your", " ", "model"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"reshapedAudioData", "=", 
     RowBox[{"Partition", "[", 
      RowBox[{"audioData", ",", "10", ",", "10", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", "0.0"}], "]"}]}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Evaluate", " ", "the", " ", "network", " ", "with", " ", "the", " ", 
     "reshaped", " ", "audio", " ", "data"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"output", "=", 
     RowBox[{"net", "[", "reshapedAudioData", "]"}]}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Convert", " ", "the", " ", "output", " ", "back", " ", "to", " ", "a", 
     " ", "single", " ", "audio", " ", "signal"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"outputAudioData", "=", 
     RowBox[{"Flatten", "[", "output", "]"}]}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Create", " ", "a", " ", "new", " ", "Audio", " ", "object", " ", "from", 
     " ", "the", " ", "processed", " ", "data"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"outputAudio", "=", 
     RowBox[{"Audio", "[", 
      RowBox[{"outputAudioData", ",", 
       RowBox[{"AudioSampleRate", "[", "audio", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Export", " ", "the", " ", "processed", " ", "audio", " ", "to", " ", "a",
      " ", "new", " ", "WAV", " ", "file"}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"Export", "[", 
     RowBox[{
     "\"\<C:\\Users\\User\\Desktop\\wolfram_projects\\guesstest.wav\>\"", ",",
       "outputAudio"}], "]"}], ";"}], "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{
    "Generate", " ", "a", " ", "spectrogram", " ", "of", " ", "the", " ", 
     "processed", " ", "audio"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"spectrogram", "=", 
     RowBox[{"Spectrogram", "[", "outputAudio", "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{"(*", 
    RowBox[{"Display", " ", "the", " ", "spectrogram"}], "*)"}], 
   "\[IndentingNewLine]", "spectrogram", "\n", "\n", "\n"}]}]], "Input",
 CellChangeTimes->{{3.933001788974537*^9, 3.933001788977043*^9}, {
   3.9330019344034634`*^9, 3.9330019382098083`*^9}, {3.933002035530796*^9, 
   3.9330020623179035`*^9}, {3.9330021637634373`*^9, 
   3.9330021655984344`*^9}, {3.9330022791353607`*^9, 3.93300229868211*^9}, {
   3.933002389891613*^9, 3.9330023932413692`*^9}, {3.933002738082035*^9, 
   3.9330027400870514`*^9}, {3.9330028315413113`*^9, 3.933002849491314*^9}, {
   3.9330029167571907`*^9, 3.9330029328155155`*^9}, {3.9330030779070435`*^9, 
   3.9330030792941*^9}, {3.9330032656354504`*^9, 3.933003269035454*^9}, 
   3.9330050968762074`*^9, {3.9330051665887585`*^9, 3.93300522338472*^9}, {
   3.9330052695707436`*^9, 3.9330052789283905`*^9}, {3.933005326358116*^9, 
   3.9330053513160667`*^9}, {3.9330054095983925`*^9, 3.9330054392924232`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"d6ab5b32-15df-4b4e-b9d7-9f82c0e35147"],

Cell[BoxData[
 TemplateBox[{
  "Import", "noelem", 
   "\"The Import element \\\"\\!\\(\\*RowBox[{\\\"audio\\\"}]\\)\\\" is not \
present when importing as \
\\!\\(\\*RowBox[{\\\"\\\\\\\"WAV\\\\\\\"\\\"}]\\).\"", 2, 17, 12, 
   23861912739993412805, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.933005446123144*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"993a12ac-53ae-4a4f-bc65-6f383eca9763"],

Cell[BoxData[
 TemplateBox[{
  "AudioData", "audio", 
   "\"Expecting an audio object instead of \\!\\(\\*RowBox[{\\\"$Failed\\\"}]\
\\).\"", 2, 18, 13, 23861912739993412805, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.933005446250532*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"f05f8404-5edf-2b42-8d45-413251992e4d"],

Cell[BoxData[
 TemplateBox[{
  "AudioData", "nonopt", 
   "\"Options expected (instead of \\!\\(\\*RowBox[{\\\"0.`\\\"}]\\)) beyond \
position \\!\\(\\*RowBox[{\\\"2\\\"}]\\) in \
\\!\\(\\*RowBox[{\\\"AudioData\\\", \\\"[\\\", RowBox[{\\\"$Failed\\\", \\\",\
\\\", \\\"0.`\\\", \\\",\\\", \\\"0.`\\\", \\\",\\\", \\\"0.`\\\", \\\",\\\", \
\\\"0.`\\\", \\\",\\\", \\\"0.`\\\", \\\",\\\", \\\"0.`\\\", \\\",\\\", \
\\\"0.`\\\", \\\",\\\", \\\"0.`\\\", \\\",\\\", \\\"0.`\\\"}], \
\\\"]\\\"}]\\). An option must be a rule or a list of rules.\"", 2, 19, 14, 
   23861912739993412805, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.933005446363079*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"d14f4735-0095-d24e-baf2-4a95d3fe9a0a"],

Cell[BoxData[
 TemplateBox[{
  "AudioData", "audio", 
   "\"Expecting an audio object instead of \
\\!\\(\\*RowBox[{\\\"AudioData\\\", \\\"[\\\", RowBox[{\\\"$Failed\\\", \\\",\
\\\", \\\"0.`\\\", \\\",\\\", \\\"0.`\\\", \\\",\\\", \\\"0.`\\\", \\\",\\\", \
\\\"0.`\\\", \\\",\\\", \\\"0.`\\\", \\\",\\\", \\\"0.`\\\", \\\",\\\", \
\\\"0.`\\\", \\\",\\\", \\\"0.`\\\", \\\",\\\", \\\"0.`\\\"}], \
\\\"]\\\"}]\\).\"", 2, 19, 15, 23861912739993412805, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9330054463844566`*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"549b9ac0-9525-c34a-abc7-b8b1c6c63098"],

Cell[BoxData[
 TemplateBox[{
  "NetChain", "invindata2", 
   "\"Data supplied to \\!\\(\\*RowBox[{\\\"\\\\\\\"port \
\\\\\\\\\\\\\\\"Input\\\\\\\\\\\\\\\"\\\\\\\"\\\"}]\\) was not \
\\!\\(\\*RowBox[{\\\"\\\\\\\"an array\\\\\\\"\\\"}]\\) (or a list of \
these).\"", 2, 20, 16, 23861912739993412805, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9330054464258537`*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"991d5ed3-8593-1c4b-b133-b69d5365ede0"],

Cell[BoxData[
 TemplateBox[{
  "Flatten", "normal", 
   "\"Nonatomic expression expected at position \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \\!\\(\\*RowBox[{\\\"Flatten\\\", \
\\\"[\\\", \\\"$Failed\\\", \\\"]\\\"}]\\).\"", 2, 21, 17, 
   23861912739993412805, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.933005446550476*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"db94f422-49ea-3f48-a962-d28114d20ed3"],

Cell[BoxData[
 TemplateBox[{
  "AudioSampleRate", "audio", 
   "\"Expecting an audio object instead of \\!\\(\\*RowBox[{\\\"$Failed\\\"}]\
\\).\"", 2, 22, 18, 23861912739993412805, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9330054468760014`*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"115ffd5a-a4c0-fd4d-91ad-cea01d1c95e2"],

Cell[BoxData[
 TemplateBox[{
  "Audio", "audiodtype", 
   "\"The specified data type \\!\\(\\*RowBox[{\\\"AudioSampleRate\\\", \\\"[\
\\\", \\\"$Failed\\\", \\\"]\\\"}]\\) should be either \
\\\"SignedInteger8\\\", \\\"SignedInteger16\\\", \\\"SignedInteger32\\\", \
\\\"Real32\\\", or \\\"Real64\\\".\"", 2, 22, 19, 23861912739993412805, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.933005447004238*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"b1ba3f88-3665-d84b-a91f-2824a8a1ef88"],

Cell[BoxData[
 TemplateBox[{
  "Export", "nodta", 
   "\"\\!\\(\\*RowBox[{\\\"Audio\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"Flatten\\\", \\\"[\\\", \\\"$Failed\\\", \\\"]\\\"}], \
\\\",\\\", RowBox[{\\\"AudioSampleRate\\\", \\\"[\\\", \\\"$Failed\\\", \\\"]\
\\\"}]}], \\\"]\\\"}]\\) contains no data that can be exported to the \
\\!\\(\\*RowBox[{\\\"\\\\\\\"WAV\\\\\\\"\\\"}]\\) format.\"", 2, 23, 30, 
   23861912739993412805, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9330054472730503`*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"0dab9d62-75fe-5b49-b26a-d77b4a4f0f61"],

Cell[BoxData[
 TemplateBox[{
  "Spectrogram", "data", 
   "\"\\!\\(\\*RowBox[{\\\"Audio\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"Flatten\\\", \\\"[\\\", \\\"$Failed\\\", \\\"]\\\"}], \
\\\",\\\", RowBox[{\\\"AudioSampleRate\\\", \\\"[\\\", \\\"$Failed\\\", \\\"]\
\\\"}]}], \\\"]\\\"}]\\) is not a real-valued vector.\"", 2, 24, 31, 
   23861912739993412805, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.933005447441555*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"ae20f7ca-364d-2f40-8b1e-64540a20bef1"],

Cell[BoxData[
 RowBox[{"Spectrogram", "[", 
  RowBox[{"Audio", "[", 
   RowBox[{
    RowBox[{"Flatten", "[", "$Failed", "]"}], ",", 
    RowBox[{"AudioSampleRate", "[", "$Failed", "]"}]}], "]"}], 
  "]"}]], "Output",
 CellChangeTimes->{
  3.933002744835207*^9, {3.933002853986557*^9, 3.9330028753737545`*^9}, 
   3.93300295005768*^9, 3.9330030901900864`*^9, 3.9330032793018723`*^9, 
   3.933005447490093*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"cc2b9825-771b-db44-8bb1-8ffd0c60bef2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["%58"], "Input",
 NumberMarks->False,
 CellLabel->"In[65]:=",ExpressionUUID->"0daa0917-afdf-8c41-99a1-5e119f73b694"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["NetChain",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[
                    0.817375, 0.31808499999999995`, 0.3521274999999998], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9939125, 0.9772695, 0.97840425]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    FaceForm[{
                    Hue[0.033923303834808266`, 0.44313725490196076`, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6.221999645233154, 18.73400115966797}, {
                    9.045999526977539, 18.73400115966797}, {9.045999526977539,
                     8.734001159667969}, {6.221999645233154, 
                    8.734001159667969}, {6.221999645233154, 
                    18.73400115966797}}}]}, {
                    FaceForm[{
                    RGBColor[0.7565, 0.09078, 0.1361699999999998], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.81100082397461, 18.73400115966797}, {
                    15.635000228881836`, 18.73400115966797}, {
                    15.635000228881836`, 8.734001159667969}, {
                    12.81100082397461, 8.734001159667969}, {12.81100082397461,
                     18.73400115966797}}}]}, {
                    FaceForm[{
                    Hue[0.04791666666666667, 0.6274509803921569, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{19.39900016784668, 18.73400115966797}, {
                    22.222999572753906`, 18.73400115966797}, {
                    22.222999572753906`, 8.734001159667969}, {
                    19.39900016784668, 8.734001159667969}, {19.39900016784668,
                     18.73400115966797}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    9.98699951171875, 15.73439884185791}, {
                    11.868999481201172`, 13.73439884185791}, {
                    9.98699951171875, 11.73439884185791}, {9.98699951171875, 
                    15.73439884185791}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    16.575298309326172`, 15.73439884185791}, {
                    18.457298278808594`, 13.73439884185791}, {
                    16.575298309326172`, 11.73439884185791}, {
                    16.575298309326172`, 15.73439884185791}}}]}}}}}, {
                Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                 ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 30}}}], Center,
                Center, 32], 
              InsetBox[
               FormBox[
                FrameBox[
                 StyleBox["\"uninitialized\"", 
                  RGBColor[0.66, 0, 0], FontSize -> -3 + Inherited, 
                  StripOnInput -> False], Background -> GrayLevel[1, 0.9], 
                 FrameStyle -> None, FrameMargins -> {{0, 0}, {-1.5, -1.5}}, 
                 RoundingRadius -> 3, BaselinePosition -> (Center -> Center), 
                 StripOnInput -> False], TraditionalForm], {14, 14}]}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], ImagePadding -> {{0, 1}, {1, 0}}, 
              PlotRange -> {{-12, 40}, {-2, 30}}, ImageSize -> {60, 36}}], 
            GridBox[{{
               TagBox[
                StyleBox[
                 TemplateBox[{
                   TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox["\"array\"", "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{
                   TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox[
                 TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                   StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                  "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[
                    0.817375, 0.31808499999999995`, 0.3521274999999998], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9939125, 0.9772695, 0.97840425]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    FaceForm[{
                    Hue[0.033923303834808266`, 0.44313725490196076`, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6.221999645233154, 18.73400115966797}, {
                    9.045999526977539, 18.73400115966797}, {9.045999526977539,
                     8.734001159667969}, {6.221999645233154, 
                    8.734001159667969}, {6.221999645233154, 
                    18.73400115966797}}}]}, {
                    FaceForm[{
                    RGBColor[0.7565, 0.09078, 0.1361699999999998], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.81100082397461, 18.73400115966797}, {
                    15.635000228881836`, 18.73400115966797}, {
                    15.635000228881836`, 8.734001159667969}, {
                    12.81100082397461, 8.734001159667969}, {12.81100082397461,
                     18.73400115966797}}}]}, {
                    FaceForm[{
                    Hue[0.04791666666666667, 0.6274509803921569, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{19.39900016784668, 18.73400115966797}, {
                    22.222999572753906`, 18.73400115966797}, {
                    22.222999572753906`, 8.734001159667969}, {
                    19.39900016784668, 8.734001159667969}, {19.39900016784668,
                     18.73400115966797}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    9.98699951171875, 15.73439884185791}, {
                    11.868999481201172`, 13.73439884185791}, {
                    9.98699951171875, 11.73439884185791}, {9.98699951171875, 
                    15.73439884185791}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    16.575298309326172`, 15.73439884185791}, {
                    18.457298278808594`, 13.73439884185791}, {
                    16.575298309326172`, 11.73439884185791}, {
                    16.575298309326172`, 15.73439884185791}}}]}}}}}, {
                Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                 ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 30}}}], Center,
                Center, 32], 
              InsetBox[
               FormBox[
                FrameBox[
                 StyleBox["\"uninitialized\"", 
                  RGBColor[0.66, 0, 0], FontSize -> -3 + Inherited, 
                  StripOnInput -> False], Background -> GrayLevel[1, 0.9], 
                 FrameStyle -> None, FrameMargins -> {{0, 0}, {-1.5, -1.5}}, 
                 RoundingRadius -> 3, BaselinePosition -> (Center -> Center), 
                 StripOnInput -> False], TraditionalForm], {14, 14}]}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], ImagePadding -> {{0, 1}, {1, 0}}, 
              PlotRange -> {{-12, 40}, {-2, 30}}, ImageSize -> {60, 36}}], 
            GridBox[{{
               TagBox[
                
                DynamicModuleBox[{
                 NeuralNetworks`Private`NetChain`assoc3 = <|
                   "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{10, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> NeuralNetworks`SizeT, "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                  NeuralNetworks`Private`NetChain`opart, 
                  NeuralNetworks`Private`NetChain`part, 
                  NeuralNetworks`Private`NetChain`selected = Null}, 
                 DynamicBox[
                  GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"array\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                   GridBoxSpacings -> {"Columns" -> {{1}}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridFrameMargins -> {{0, 0}, {0, 0}}], 
                  TrackedSymbols :> {
                   NeuralNetworks`Private`NetChain`selected}], 
                 Initialization :> {NetChain}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  NetChain[<|
   "Type" -> "Chain", 
    "Nodes" -> <|
     "1" -> <|"Type" -> "Linear", 
        "Arrays" -> <|
         "Weights" -> 
          NeuralNetworks`TensorT[{10, NeuralNetworks`SizeT}, 
            NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
            NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]|>, 
        "Parameters" -> <|
         "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
          NeuralNetworks`SizeT, "$InputDimensions" -> 
          NeuralNetworks`ListT[
           NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
        "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
            NeuralNetworks`ListT[
            NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
            NeuralNetworks`AtomT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
      "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
        "Parameters" -> <|
         "Function" -> NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
          "$Dimensions" -> {10}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>,
     "Edges" -> {
     NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Inputs", "Input"], 
      NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Outputs", "Output"] -> 
      NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"]}, 
    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
        NeuralNetworks`ListT[NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
        NeuralNetworks`AtomT]|>, 
    "Outputs" -> <|
     "Output" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, <|
   "Version" -> "14.1.1", "Unstable" -> False|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.933002411075981*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"c36f0646-a046-1746-9a41-99439c0d5ff7"]
}, Open  ]]
},
WindowSize->{582.6, 488.4},
WindowMargins->{{Automatic, 259.20000000000005`}, {
  28.800000000000068`, Automatic}},
FrontEndVersion->"14.1 for Microsoft Windows (64-bit) (July 16, 2024)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"125d6e08-8b1e-2445-9ae6-89d9be68c9ee"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 11379, 277, 1702, "Input",ExpressionUUID->"d6ab5b32-15df-4b4e-b9d7-9f82c0e35147"],
Cell[11958, 301, 446, 11, 26, "Message",ExpressionUUID->"993a12ac-53ae-4a4f-bc65-6f383eca9763"],
Cell[12407, 314, 371, 9, 26, "Message",ExpressionUUID->"f05f8404-5edf-2b42-8d45-413251992e4d"],
Cell[12781, 325, 776, 15, 45, "Message",ExpressionUUID->"d14f4735-0095-d24e-baf2-4a95d3fe9a0a"],
Cell[13560, 342, 648, 13, 45, "Message",ExpressionUUID->"549b9ac0-9525-c34a-abc7-b8b1c6c63098"],
Cell[14211, 357, 496, 11, 26, "Message",ExpressionUUID->"991d5ed3-8593-1c4b-b133-b69d5365ede0"],
Cell[14710, 370, 455, 11, 26, "Message",ExpressionUUID->"db94f422-49ea-3f48-a962-d28114d20ed3"],
Cell[15168, 383, 379, 9, 26, "Message",ExpressionUUID->"115ffd5a-a4c0-fd4d-91ad-cea01d1c95e2"],
Cell[15550, 394, 539, 12, 44, "Message",ExpressionUUID->"b1ba3f88-3665-d84b-a91f-2824a8a1ef88"],
Cell[16092, 408, 626, 13, 44, "Message",ExpressionUUID->"0dab9d62-75fe-5b49-b26a-d77b4a4f0f61"],
Cell[16721, 423, 552, 12, 26, "Message",ExpressionUUID->"ae20f7ca-364d-2f40-8b1e-64540a20bef1"],
Cell[17276, 437, 487, 11, 32, "Output",ExpressionUUID->"cc2b9825-771b-db44-8bb1-8ffd0c60bef2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17800, 453, 129, 2, 28, "Input",ExpressionUUID->"0daa0917-afdf-8c41-99a1-5e119f73b694"],
Cell[17932, 457, 23047, 454, 62, "Output",ExpressionUUID->"c36f0646-a046-1746-9a41-99439c0d5ff7"]
}, Open  ]]
}
]
*)

